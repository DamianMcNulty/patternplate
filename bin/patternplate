#!/usr/bin/env node

/**
 * NAME
 *  patternplate - patternplate cli tool for creating projects and scaffolding
 *
 * SYNOPSIS
 * 	patternplate action [objecttype] [objectname] [--config configfile]
 *
 * OPTIONS
 * 	action
 * 		Action to perform on given objecttype with objectname. Available
 * 		actions are:
 *
 *		list
 *			List objects of type objecttype with objectname matching a given search pattern
 *
 * 		create [default]
 * 			Create a new object of type objecttype with name objectname
 *
 * 		remove
 * 			Delete object of type objecttype with name objectname
 *
 *		build
 *			Build a given project. Applies only to objects of type project.
 *
 * 		start
 * 			Start a given project's server. Applies only to objects of type project
 *
 * 	objecttype
 * 		Type to perform the given action against. Available types are:
 *
 * 			project [default]
 *
 * 			module
 *
 * 			transform
 *
 *	objectname
 *		Name to apply to the given objectname. Actions remove, build and start depend
 *		on existence of target objectname. Create action depends on objectname to be
 *		unique in the scope of the given objecttype.
 *
 * 	configfile
 * 		JSON-formatted configuration file to read before performing tasks. Allows overriding
 *   	configuration loaded from default locations. See FILES for details.
 *
 * FILES
 * 	Configuration will be read from, ordered by priority:
 * 	- .patternplaterc
 * 	- ~/.patternplaterc
 * 	- ~/.patternplate/config
 * 	- ~/.config/patternplate
 * 	- ~/.config/patternplate/config
 * 	- ~/etc/patternplaterc
 * 	- ~/etc/patternplate/config
 *
 * BUGS
 * 	None reported by now
 * 	See: https://git.sinnerschrader.com/team-ux/patternplate/issues
 *
 * AUTHOR
 * 	Mario Nebl <mario.nebl@sinnerschrader.com>
 *
 * SEE ALSO
 * 	patternplate-cli, patternplate-build(1), patternplate-create(1), patternplate-remove(1), patternplate-start(1)
 */

var winston = require('winston');
var pkg = require('../package.json');
var argv = require('rc')(pkg.name, {});

var cli = require('../lib/cli');
argv.env = process.env.NODE_ENV || 'development';
argv.pkg = pkg;

cli(argv, function(err, result){
	if (err) {
		winston.error(err);
		process.exit(1);
	}

	if (result) {
		winston.info(result);
	}
	process.exit(0);
});
